"""
.
"""
# Font Manager, a font management application for the GNOME desktop
#
# Copyright (C) 2009, 2010 Jerry Casiano
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to:
#
#    Free Software Foundation, Inc.
#    51 Franklin Street, Fifth Floor
#    Boston, MA 02110-1301, USA.

# Disable warnings related to gettext
# pylint: disable-msg=E0602

import os
import glib

from os.path import join


PACKAGE = 'font-manager'

if os.path.exists(os.path.join(os.path.dirname(__file__),
                                                    'font-manager.desktop')):
    VERSION     = 'is not installed'
    PACKAGE_DIR = os.path.dirname(os.path.abspath(__file__))
    LOCALEDIR   = os.path.join(os.path.dirname(__file__), '../po')
else:
    VERSION     = '@PACKAGE_VERSION@'
    PACKAGE_DIR = '@prefix@/share/font-manager'
    LOCALEDIR   = '@LOCALEDIR@'

PACKAGE_DATA_DIR            =   join(PACKAGE_DIR, 'data')
CACHE_DIR                   =   join(glib.get_user_cache_dir(), PACKAGE)
TMP_DIR                     =   join(CACHE_DIR, 'tmp')
DATABASE_FILE               =   join(CACHE_DIR, 'font-manager.sqlite')
CACHE_FILE                  =   join(CACHE_DIR, 'font-manager.cache')
CONFIG_DIR                  =   glib.get_user_config_dir()
APP_LOG                     =   join(CACHE_DIR, 'font-manager.log')
APP_CONFIG_DIR              =   join(CONFIG_DIR, PACKAGE)
APP_CONFIG                  =   join(APP_CONFIG_DIR, 'preferences.ini')
AUTOSTART_DIR               =   join(CONFIG_DIR, 'autostart')
DATA_DIR                    =   join(glib.get_user_data_dir(), PACKAGE)
DESKTOP_DIR                 =   glib.get_user_special_dir\
                                (glib.USER_DIRECTORY_DESKTOP)

HOME                        =   os.getenv('HOME')
USER                        =   os.getenv('USER')
USER_FONT_DIR               =   join(HOME, '.fonts')
COMPAT_COLLECTIONS          =   join(CONFIG_DIR, 'fontgroups.xml')
USER_FONT_COLLECTIONS       =   join(DATA_DIR, 'Collections.xml')
USER_FONT_COLLECTIONS_BAK   =   join(DATA_DIR, 'Collections.xml.bak')
USER_FONT_CONFIG            =   join(HOME, '.fonts.conf')
USER_FONT_CONFIG_DIR        =   join(APP_CONFIG_DIR, 'conf.d')
USER_FONT_CONFIG_DIRS       =   join(APP_CONFIG_DIR, 'directories.conf')
USER_FONT_CONFIG_INVALID    =   join(HOME, 'invalid.fonts.conf')
USER_FONT_CONFIG_RENDER     =   join(APP_CONFIG_DIR, 'local.conf')
USER_FONT_CONFIG_SELECT     =   join(APP_CONFIG_DIR, 'select.conf')
USER_FONT_CONFIG_DESELECT   =   join(APP_CONFIG_DIR, 'select.conf.tmp')
USER_LIBRARY_DIR            =   join(DATA_DIR, 'Library')
USER_LIBRARY_SYMLINK        =   join(USER_FONT_DIR, 'Library')
USER_ACTIONS_CONFIG         =   join(APP_CONFIG_DIR, 'actions.conf')


FONT_EXTS = ('.pfa', '.pfb', '.ttf', '.ttc', '.otf', \
                '.PFA', '.PFB', '.TTF', '.TTC', '.OTF')
T1_EXTS = ('.pfa', '.pfb', '.PFA', '.PFB')
ARCH_EXTS = ('.zip', '.tar', '.tar.gz', '.tar.bz2',
               '.ZIP', '.TAR', '.TAR.GZ', '.TAR.BZ2' )
FONT_GLOBS = ['*.ttf', '*.ttc', '*.otf', '*.TTF', '*.TTC', '*.OTF']
ARCH_GLOBS = ['*.zip', '*.tar*', '*.ZIP', '*.TAR*']

README = \
_("""* This file was placed here by Font Manager because this directory
did not exist, feel free to delete, it will not be generated again.


This is a per-user font directory.


Any fonts ( or folders containing fonts ) present in this directory are
automatically picked up by the system and available, but only to you.


Please note that not only can you specify other directories to scan for
fonts from the applications preferences dialog, but you can also set the
default folder that's opened when 'Open fonts folder' is selected.


If you wish to make fonts available to everyone using the system they will
need to be placed in /usr/share/fonts

""")

USER_FONT_CONFIG_NOTICE = \
_("""
<!--
    This file modified by Font Manager.

    Do NOT edit this file, it will be replaced on startup.

    Should you wish to customize anything please use

      %s
-->
""") % USER_FONT_CONFIG_RENDER

VALID_USER_FONT_CONFIG = \
"""<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
%s
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>

</fontconfig>
""" % (USER_FONT_CONFIG_NOTICE, USER_FONT_CONFIG_DIR, USER_FONT_CONFIG_DIRS,
        USER_FONT_CONFIG_RENDER, USER_FONT_CONFIG_SELECT)


CHECKBUTTONS = (_('Anti-Alias'), _('Auto-Hint'), _('Hinting'),
                _('LCD Filter'), _('Force Spacing'),
                _('Use Global Advance data'), _('Use Embedded Bitmaps'),
                _('Disable rgba'), _('Smaller than'), _('Larger than'))

CONSTS = {
            'hintstyle' :   {
                            '0'   :   'hintnone',
                            '1'   :   'hintslight',
                            '2'   :   'hintmedium',
                            '3'   :   'hintfull'
                            },
            'lcdfilter' :   {
                            '0'   :   'lcdnone',
                            '1'   :   'lcddefault',
                            '2'   :   'lcdlight',
                            '3'   :   'lcdlegacy'
                            },
            'spacing'   :   {
                            '0'   :   'proportional',
                            '1'   :   'dual',
                            '2'   :   'mono',
                            '3'   :   'charcell'
                            }
                            }

CONSTS_MAP = {
                'hinting'       :   'hintstyle',
                'lcdfiltering'  :   'lcdfilter',
                'forcespacing'  :   'spacing'
                }

DEFAULTS = {
            'antialias'         :   False,
            'autohint'          :   False,
            'embeddedbitmap'    :   False,
            'smallerthan'       :   False,
            'largerthan'        :   False,
            'globaladvance'     :   False,
            'hinting'           :   False,
            'hintstyle'         :   0.0,
            'lcdfiltering'      :   False,
            'lcdfilter'         :   0.0,
            'forcespacing'      :   False,
            'spacing'           :   0.0,
            'min_size'          :   0.0,
            'max_size'          :   0.0,
            'disablergba'       :   False
            }

SLANT = {
            0   :   'roman',
            1   :   'oblique',
            2   :   'italic'
            }

SKIP = (_('LCD Filter'), _('Force Spacing'),
            _('Exclude size range'), _('Disable rgba'),
            _('Smaller than'), _('Larger than'))

FC_WIDGETMAP = {
            _('Anti-Alias')                 :   'antialias',
            _('Auto-Hint')                  :   'autohint',
            _('Hinting')                    :   'hinting',
            _('LCD Filter')                 :   'lcdfiltering',
            _('Force Spacing')              :   'forcespacing',
            _('Use Global Advance data')    :   'globaladvance',
            _('Use Embedded Bitmaps')       :   'embeddedbitmap',
            _('Smaller than')               :   'smallerthan',
            _('Larger than')                :   'largerthan',
            _('Disable rgba')               :   'disablergba',
            'HintScale'                     :   'hintstyle',
            'FilterScale'                   :   'lcdfilter',
            'SpacingScale'                  :   'spacing'
            }

WIDTH = {
            0   :   'ultracondensed',
            1   :   'extracondensed',
            2   :   'condensed',
            3   :   'semicondensed',
            4   :   'normal',
            5   :   'semiexpanded',
            6   :   'expanded',
            7   :   'extraexpanded',
            8   :   'ultraexpanded'
            }

WEIGHT = {
            200   :   '0:40',
            300   :   '40:50',
            400   :   '50:100',
            700   :   '180:200',
            800   :   '200:205',
            900   :   '205:210'
            }
