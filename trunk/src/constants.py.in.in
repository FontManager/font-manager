"""
.
"""
# Font Manager, a font management application for the GNOME desktop
#
# Copyright (C) 2009, 2010 Jerry Casiano
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to:
#
#    Free Software Foundation, Inc.
#    51 Franklin Street, Fifth Floor
#    Boston, MA 02110-1301, USA.

# Disable warnings related to gettext
# pylint: disable-msg=E0602

import os
import glib
import pango

from os.path import join


PACKAGE = '@PACKAGE_NAME@'

if os.path.exists(os.path.join(os.path.dirname(__file__),
                                                    'font-manager.desktop')):
    VERSION     = 'is not installed'
    PACKAGE_DIR = os.path.dirname(os.path.abspath(__file__))
    LOCALEDIR   = os.path.join(os.path.dirname(__file__), '../po')
else:
    VERSION     = '@PACKAGE_VERSION@'
    PACKAGE_DIR = '@DATAROOTDIR@/font-manager'
    LOCALEDIR   = '@LOCALEDIR@'

PACKAGE_DATA_DIR            =   join(PACKAGE_DIR, 'data')
CACHE_DIR                   =   join(glib.get_user_cache_dir(), PACKAGE)
DATABASE_FILE               =   join(CACHE_DIR, 'font-manager.sqlite')
CACHE_FILE                  =   join(CACHE_DIR, 'font-manager.cache')
CONFIG_DIR                  =   glib.get_user_config_dir()
APP_LOG                     =   join(CACHE_DIR, 'font-manager.log')
APP_CONFIG_DIR              =   join(CONFIG_DIR, PACKAGE)
APP_CONFIG                  =   join(APP_CONFIG_DIR, 'preferences.ini')
AUTOSTART_DIR               =   join(CONFIG_DIR, 'autostart')
DATA_DIR                    =   join(glib.get_user_data_dir(), PACKAGE)
DESKTOP_DIR                 =   glib.get_user_special_dir\
                                (glib.USER_DIRECTORY_DESKTOP)

HOME                        =   os.getenv('HOME')
USER                        =   os.getenv('USER')
USER_FONT_DIR               =   join(HOME, '.fonts')
COMPAT_COLLECTIONS          =   join(CONFIG_DIR, 'fontgroups.xml')
USER_FONT_COLLECTIONS       =   join(DATA_DIR, 'Collections.xml')
USER_FONT_COLLECTIONS_BAK   =   join(DATA_DIR, 'Collections.xml.bak')
USER_FONT_CONFIG            =   join(HOME, '.fonts.conf')
USER_FONT_CONFIG_DIR        =   join(APP_CONFIG_DIR, 'conf.d')
USER_FONT_CONFIG_DIRS       =   join(APP_CONFIG_DIR, 'directories.conf')
USER_FONT_CONFIG_INVALID    =   join(HOME, 'invalid.fonts.conf')
USER_FONT_CONFIG_RENDER     =   join(APP_CONFIG_DIR, 'local.conf')
USER_FONT_CONFIG_SELECT     =   join(APP_CONFIG_DIR, 'select.conf')
USER_FONT_CONFIG_DESELECT   =   join(APP_CONFIG_DIR, 'select.conf.tmp')
USER_LIBRARY_DIR            =   join(DATA_DIR, 'Library')
USER_LIBRARY_SYMLINK        =   join(USER_FONT_DIR, 'Library')
USER_ACTIONS_CONFIG         =   join(APP_CONFIG_DIR, 'actions.conf')

# Standard alias families
ALIAS_FAMILIES = 'Monospace', 'Sans', 'Serif'
# Font types we "support"
FONT_EXTS = ('.pfa', '.pfb', '.ttf', '.ttc', '.otf', \
                '.PFA', '.PFB', '.TTF', '.TTC', '.OTF')
T1_EXTS = ('.pfa', '.pfb', '.PFA', '.PFB')
FONT_GLOBS = ['*.ttf', '*.ttc', '*.otf', '*.TTF', '*.TTC', '*.OTF']
# Archive types supported by most *nix systems
ARCH_EXTS = ('.zip', '.tar', '.tar.gz', '.tar.bz2',
               '.ZIP', '.TAR', '.TAR.GZ', '.TAR.BZ2' )
ARCH_GLOBS = ['*.zip', '*.tar*', '*.ZIP', '*.TAR*']

README = \
_("""* This file was placed here by Font Manager because this directory
did not exist, feel free to delete, it will not be generated again.


This is a per-user font directory.


Any fonts ( or folders containing fonts ) present in this directory are
automatically picked up by the system and available, but only to you.


Please note that not only can you specify other directories to scan for
fonts from the applications preferences dialog, but you can also set the
default folder that's opened when 'Open fonts folder' is selected.


If you wish to make fonts available to everyone using the system they will
need to be placed in /usr/share/fonts

""")

USER_FONT_CONFIG_NOTICE = \
_("""
<!--
    This file is maintained by Font Manager.

    If you wish to make any changes it is suggested you do so using

        %s

    Any changes made to this file will be automatically relocated there
    at startup and any settings already in that file will be overwritten.
-->
""") % USER_FONT_CONFIG_RENDER

USER_FONT_CONFIG_DATA = \
"""%s
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
""" % (USER_FONT_CONFIG_NOTICE, USER_FONT_CONFIG_DIR, USER_FONT_CONFIG_DIRS,
        USER_FONT_CONFIG_RENDER, USER_FONT_CONFIG_SELECT)

VALID_USER_FONT_CONFIG = \
"""<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
%s
</fontconfig>
""" % USER_FONT_CONFIG_DATA

OLD_NOTICE = \
_("""
<!--
    This file modified by Font Manager.

    Do NOT edit this file, it will be replaced on startup.

    Should you wish to customize anything please use

      %s
-->
""") % USER_FONT_CONFIG_RENDER

OLD_FONT_CONFIG = \
"""<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
%s
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>
    <include ignore_missing=\"yes\">%s</include>

</fontconfig>
""" % (OLD_NOTICE, USER_FONT_CONFIG_DIR, USER_FONT_CONFIG_DIRS,
        USER_FONT_CONFIG_RENDER, USER_FONT_CONFIG_SELECT)

EMPTY_FONT_CONFIG = \
"""<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
</fontconfig>
"""

CHECKBUTTONS = (_('Anti-Alias'), _('Auto-Hint'), _('Hinting'),
                _('LCD Filter'), _('Force Spacing'),
                _('Use Global Advance data'), _('Use Embedded Bitmaps'),
                _('Disable rgba'), _('Smaller than'), _('Larger than'))

COMPARE_TEXT = _('The quick brown fox jumps over the lazy dog.')

# Some of the most common fonts, at least according to http://www.codestyle.org/
# May or may not be valid alias targets...
COMMON_FONTS = ('A Charming Font', 'Abadi MT', 'Academy Engraved LET',
'Adobe Fangsong Std', 'Adobe Garamond', 'Adobe Heiti Std', 'Adobe Kaiti Std',
'Adobe Ming Std', 'Adobe Myungjo Std', 'Adobe Song Std', 'Agency FB', 'Alba',
'Alba Matter', 'Alba Super', 'Algerian', 'American Typewriter', 'Andale Mono',
'Andale Mono IPA', 'Andy', 'Apple Casual', 'Apple Chancery',
'Arabic Typesetting', 'Arial', 'Arial Black', 'Arial Narrow',
'Arial Rounded MT Bold', 'Arial Unicode MS', 'Avant Garde', 'Avenir',
'Baby Kruffy', 'Balker', 'Base', 'Baskerville', 'Baskerville Old Face',
'Batang', 'BatangChe', 'Bauhaus', 'Beesknees ITC', 'Bell MT', 'Belwe', 'Bembo',
'Berlin Sans FB', 'Bernard MT', 'Bernhard Modern Std',
'Berthold Akzidenz Grotesk BE', 'Bickley Script', 'Big Caslon',
'Bitstream Charter', 'Bitstream Vera Sans', 'Bitstream Vera Serif',
'Blackadder ITC', 'Blackletter', 'Bodoni MT', 'Book Antiqua', 'Bookman',
'Bookman Old Style', 'Bradley Hand ITC', 'Braggadocio', 'Britannic Bold',
'Broadway', 'Broadway BT', 'Brush Script MT', 'BudHand', 'CAMPBELL',
'Caflisch Script Pro', 'Calibri', 'Californian FB', 'Calisto MT', 'Calligraph',
'Cambria', 'Cambria Math', 'Candara', 'Capitals', 'Caslon', 'Castellar',
'Casual', 'Cataneo BT', 'Centaur', 'Century Gothic', 'Century Schoolbook',
'Century Schoolbook L', 'Chalkduster', 'Charcoal', 'Charter', 'Chicago',
'Chick', 'Chiller', 'ClearlyU', 'Colonna MT', 'Comic Sans MS', 'Consolas',
'Constantia', 'Cooper Black', 'Copperplate', 'Copperplate Gothic', 'Corbel',
'Courier', 'Courier New', 'Croobie', 'Curlz MT', 'DaunPenh', 'DecoType Naskh',
'DejaVu LGC Sans', 'DejaVu LGC Serif', 'DejaVu Sans', 'DejaVu Serif',
'Desdemona', 'Didot', 'DokChampa', 'DomBold BT', 'Domestic Manners', 'Dotum',
'DotumChe', 'Dustismo', 'Edwardian Script ITC', 'Electron', 'Engravers MT',
'Eras Bold ITC', 'Eras Demi ITC', 'Eras Light ITC', 'Eras Medium ITC',
'Estrangelo Edessa', 'Euphemia', 'Eurostile', 'FIRSTHOME', 'Fat',
'Felix Titling', 'Fine Hand', 'Fixed', 'Forte', 'Franklin Gothic',
'FreeMono', 'FreeSans', 'FreeSerif', 'Freestyle Script', 'French Script MT',
'Freshbot', 'Frosty', 'Futura', 'GENUINE', 'Gadget', 'Garamond', 'Gautami',
'Geneva', 'Georgia', 'Georgia Ref', 'Gigi', 'Gill Sans', 'Gill Sans MT',
'Gill Sans MT', 'GlooGun', 'Goudy Old Style', 'Goudy Stout', 'Gulim',
'GulimChe', 'GungSeo', 'Gungsuh', 'GungsuhChe', 'Haettenschweiler',
'Harlow Solid Italic', 'Harrington', 'Heiti SC', 'Heiti TC', 'Helvetica',
'Helvetica Narrow', 'Helvetica Neue', 'Herculanum', 'High Tower Text',
'Highlight LET', 'Hiragino Kaku Gothic ProN', 'Hiragino Kaku Gothic StdN',
'Hiragino Maru Gothic ProN', 'Hiragino Mincho ProN', 'Hoefler Text',
'ITC Century', 'ITC Franklin Gothic', 'Impact', 'Imprint MT Shadow',
'Informal Roman', 'Interstate', 'Isabella', 'Iskoola Pota', 'Jenkins v',
'John Handy LET', 'Jokerman', 'Jokerman LET', 'Jokewood', 'Juice ITC',
'Junkyard', 'Kabel Ult BT', 'Kailasa', 'Kalinga', 'Kartika', 'Kaufmann',
'Kino MT', 'Kokonor', 'Kristen ITC', 'Kunstler Script', 'La Bamba LET',
'Latha', 'Liberation Mono', 'Liberation Sans', 'Liberation Serif',
'Linux Libertine', 'Linux Libertine C', 'Lucida', 'Lucida Bright',
'Lucida Calligraphy', 'Lucida Console', 'Lucida Fax', 'Lucida Grande',
'Lucida Handwriting', 'Lucida Sans', 'Lucida Sans Typewriter',
'Lucida Sans Unicode', 'Lucida Typewriter', 'LucidaBright', 'Luxi Mono',
'Luxi Sans', 'Luxi Serif', 'MARKETPRO', 'MS Gothic', 'MS Mincho', 'MS PGothic',
'MS PMincho', 'MS Reference Sans Serif', 'MS Reference Serif', 'MS UI Gothic',
'MV Boli', 'Magneto', 'Maiandra GD', 'Mangal', 'Marked Fool', 'Marker Felt',
'Matisse ITC', 'Matura MT Script Capitals', 'Mead Bold', 'Mekanik LET', 'Menlo',
'Mercurius Script MT', 'Metal', 'MgOpen Canonica', 'MgOpen Cosmetica',
'MgOpen Modata', 'MgOpen Moderna', 'Microsoft Sans Serif', 'Microsoft Yi Baiti',
'Milano LET', 'MingLiU', 'Minion Std', 'Minion Web', 'MisterEarl BT', 'Mistral',
'Monaco', 'Mongolian Baiti', 'Monotype Corsiva', 'Monotype.com', 'NSimSun',
'New Century Schoolbook', 'New York', 'News Gothic MT', 'Niagara Engraved',
'Niagara Solid', 'Nice', 'Nimbus Mono L', 'Nimbus Roman No', 'Nimbus Sans L',
'Nyala', 'OCR A Extended', 'OCRB', 'Odessa LET', 'Old English Text MT',
'OldDreadfulNo', 'One Stroke Script LET', 'Onyx', 'Optima', 'Orange LET',
'PMingLiU', 'Palace Script MT', 'Palatino', 'Palatino Linotype', 'Papyrus',
'ParkAvenue BT', 'Penguin Attack', 'Pepita MT', 'Perpetua',
'Perpetua Titling MT', 'Playbill', 'Poornut', 'Porcelain', 'Pristina',
'Pump Demi Bold LET', 'Pussycat', 'Quixley LET', 'Raavi', 'Rage Italic',
'Rage Italic LET', 'Ravie', 'Rockwell', 'RotisSemiSans', 'Ruach LET',
'Runic MT', 'Sand', 'Script MT', 'Scruff LET', 'Segoe Print', 'Segoe Script',
'Segoe UI', 'Shelley', 'Showcard Gothic', 'Shruti', 'SimHei', 'SimSun', 'Skia',
'Smudger LET', 'Snap ITC', 'Square', 'Staccato', 'Stencil', 'Sylfaen', 'Tahoma',
'Techno', 'Tempus Sans ITC', 'Terminal', 'Textile', 'Times', 'Times New Roman',
'Tiranti Solid LET', 'TradeGothic', 'Trebuchet MS', 'Tunga', 'Tw Cen MT',
'URW Bookman L', 'URW Chancery L', 'URW Gothic L', 'URW Palladio L',
'University Roman LET', 'Utopia', 'Vera Sans', 'Vera Sans Mono', 'Vera Serif',
'Verdana', 'Verdana Ref', 'Victorian LET', 'Viner Hand ITC')

CONSTS = {
            'hintstyle' :   {
                            '0'   :   'hintnone',
                            '1'   :   'hintslight',
                            '2'   :   'hintmedium',
                            '3'   :   'hintfull'
                            },
            'lcdfilter' :   {
                            '0'   :   'lcdnone',
                            '1'   :   'lcddefault',
                            '2'   :   'lcdlight',
                            '3'   :   'lcdlegacy'
                            },
            'spacing'   :   {
                            '0'   :   'proportional',
                            '1'   :   'dual',
                            '2'   :   'mono',
                            '3'   :   'charcell'
                            }
                            }

CONSTS_MAP = {
                'hinting'       :   'hintstyle',
                'lcdfiltering'  :   'lcdfilter',
                'forcespacing'  :   'spacing'
                }

DEFAULTS = {
            'antialias'         :   False,
            'autohint'          :   False,
            'embeddedbitmap'    :   False,
            'smallerthan'       :   False,
            'largerthan'        :   False,
            'globaladvance'     :   False,
            'hinting'           :   False,
            'hintstyle'         :   0.0,
            'lcdfiltering'      :   False,
            'lcdfilter'         :   0.0,
            'forcespacing'      :   False,
            'spacing'           :   0.0,
            'min_size'          :   0.0,
            'max_size'          :   0.0,
            'disablergba'       :   False
            }

# Most common font styles, we try to select one of these if available
DEFAULT_STYLES  =  ['Regular', 'Roman', 'Medium', 'Normal', 'Book']

FC_WIDGETMAP = {
            _('Anti-Alias')                 :   'antialias',
            _('Auto-Hint')                  :   'autohint',
            _('Hinting')                    :   'hinting',
            _('LCD Filter')                 :   'lcdfiltering',
            _('Force Spacing')              :   'forcespacing',
            _('Use Global Advance data')    :   'globaladvance',
            _('Use Embedded Bitmaps')       :   'embeddedbitmap',
            _('Smaller than')               :   'smallerthan',
            _('Larger than')                :   'largerthan',
            _('Disable rgba')               :   'disablergba',
            'HintScale'                     :   'hintstyle',
            'FilterScale'                   :   'lcdfilter',
            'SpacingScale'                  :   'spacing'
            }

# Note to translators: this should be a pangram (a sentence containing all
# letters of your alphabet. See http://en.wikipedia.org/wiki/Pangram for
# more information and possible samples for your language.
PREVIEW_TEXT = _("""The quick brown fox jumps over the lazy dog.
ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
1234567890.:,;(*!?')""")

# These are basically identical between pango and fc
SLANT = {
            0   :   'roman',
            1   :   'oblique',
            2   :   'italic'
            }

SKIP = (_('LCD Filter'), _('Force Spacing'),
            _('Exclude size range'), _('Disable rgba'),
            _('Smaller than'), _('Larger than'))

SCALES = {
            _('Hinting')           :   'HintScale',
            _('LCD Filter')        :   'FilterScale',
            _('Force Spacing')     :   'SpacingScale'
            }

SCALE_LABELS = {
                'HintScale'         :   {
                                        0.0   :   'None',
                                        0.1   :   'Slight',
                                        0.2   :   'Medium',
                                        0.3   :   'Full'
                                        },
                'FilterScale'       :   {
                                        0.0   :   'None',
                                        0.1   :   'Default',
                                        0.2   :   'Light',
                                        0.3   :   'Legacy'
                                        },
                'SpacingScale'      :   {
                                        0.0   :   'Proportional',
                                        0.1   :   'Dual',
                                        0.2   :   'Mono',
                                        0.3   :   'Charcell'
                                        }
                                        }

SCALE_SENSITIVITY = {
                    'HintScale'         :   'hinting',
                    'FilterScale'       :   'lcdfiltering',
                    'SpacingScale'      :   'forcespacing'
                    }

SENSITIVITY = {
                _('Auto-Hint')     :   _('Hinting'),
                _('Hinting')       :   _('Auto-Hint'),
                _('Larger than')   :   'max_size',
                _('Smaller than')  :   'min_size'
                }

# These are basically identical between pango and fc
WIDTH = {
            0   :   'ultracondensed',
            1   :   'extracondensed',
            2   :   'condensed',
            3   :   'semicondensed',
            4   :   'normal',
            5   :   'semiexpanded',
            6   :   'expanded',
            7   :   'extraexpanded',
            8   :   'ultraexpanded'
            }

# Map of pango to fc values
if pango.version() < 12400:
    WEIGHT = {
                200 :   '0:40',
                300 :   '40:50',
                400 :   '50:100',
                700 :   '180:200',
                800 :   '200:205',
                900 :   '205:210'
                }
else:
    WEIGHT = {
                100 :   '0:0',
                200 :   '0:40',
                300 :   '40:50',
                380 :   '50:75',
                400 :   '75:80',
                500 :   '80:100',
                600 :   '100:180',
                700 :   '180:200',
                800 :   '200:205',
                900 :   '205:210',
               1000 :   '210:210'
                }
