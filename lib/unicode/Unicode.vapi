/* Unicode-0.8.5.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Unicode", gir_namespace = "Unicode", gir_version = "0.8.4", lower_case_cprefix = "unicode_")]
namespace Unicode {
    [CCode (cheader_filename = "unicode-character-map.h", type_id = "unicode_character_map_get_type ()")]
    public class CharacterMap : Gtk.DrawingArea, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public CharacterMap ();
        public unichar get_active_character ();
        public unowned Unicode.CodepointList? get_codepoint_list ();
        public unowned Pango.FontDescription? get_font_desc ();
        public double get_preview_size ();
        [NoWrapper]
        public virtual void set_active_char (uint ch);
        public void set_active_character (unichar wc);
        public void set_codepoint_list (Unicode.CodepointList? codepoint_list);
        public void set_font_desc (Pango.FontDescription font_desc);
        public void set_preview_size (double size);
        [NoWrapper]
        public virtual void set_scroll_adjustments (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
        public uint active_character { get; set; }
        public Unicode.CodepointList codepoint_list { get; set; }
        public Pango.FontDescription font_desc { get; set; }
        public double preview_size { get; set; }
        public virtual signal void activate ();
        public virtual signal void copy_clipboard ();
        public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
        public virtual signal void paste_clipboard ();
        public virtual signal void status_message (string message);
    }
    [CCode (cheader_filename = "unicode-info.h", type_id = "unicode_character_map_zoom_window_get_type ()")]
    public class CharacterMapZoomWindow : Gtk.Popover, Atk.Implementor, Gtk.Buildable {
        [CCode (has_construct_function = false)]
        public CharacterMapZoomWindow ();
        [NoAccessorMethod]
        public uint active_character { get; set; }
        [NoAccessorMethod]
        public Pango.FontDescription font_desc { owned get; set; }
    }
    [CCode (cheader_filename = "unicode-search-bar.h", type_id = "unicode_search_bar_get_type ()")]
    public class SearchBar : Gtk.SearchBar, Atk.Implementor, Gtk.Buildable {
        [CCode (has_construct_function = false, type = "GtkWidget*")]
        public SearchBar ();
        public void set_character_map (Unicode.CharacterMap? character_map);
        [NoAccessorMethod]
        public GLib.Object character_map { owned get; set; }
    }
    [CCode (cheader_filename = "unicode-codepoint-list.h", type_cname = "UnicodeCodepointListInterface", type_id = "unicode_codepoint_list_get_type ()")]
    public interface CodepointList : GLib.Object {
        public abstract unichar get_char (int index);
        public abstract int get_index (unichar wc);
        public abstract int get_last_index ();
    }
    [CCode (cheader_filename = "unicode-info.h", cprefix = "UNICODE_VERSION_", has_type_id = false)]
    public enum Standard {
        UNASSIGNED,
        @1_1,
        @2_0,
        @2_1,
        @3_0,
        @3_1,
        @3_2,
        @4_0,
        @4_1,
        @5_0,
        @5_1,
        @5_2,
        @6_0,
        @6_1,
        @6_2,
        @6_3,
        @7_0,
        @8_0,
        @9_0,
        @10_0,
        @11_0,
        @12_0,
        @12_1,
        @13_0,
        LATEST
    }
    [CCode (cheader_filename = "unicode-codepoint-list.h", cname = "UNICODE_UNICHAR_MAX")]
    public const int UNICHAR_MAX;
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_category_name (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_codepoint_data_name (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static int get_codepoint_data_name_count ();
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_codepoint_name (unichar uc);
    [CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode-info.h")]
    public static (unowned string)[] get_nameslist_colons (unichar uc);
    [CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode-info.h")]
    public static (unowned string)[] get_nameslist_equals (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unichar get_nameslist_exes (unichar uc);
    [CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode-info.h")]
    public static (unowned string)[] get_nameslist_pounds (unichar uc);
    [CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode-info.h")]
    public static (unowned string)[] get_nameslist_stars (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_script_for_char (unichar wc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kCantonese (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kDefinition (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kHangul (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kJapaneseKun (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kJapaneseOn (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kKorean (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kMandarin (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kTang (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string get_unicode_kVietnamese (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static int get_unihan_count ();
    [CCode (cheader_filename = "unicode-info.h")]
    public static Unicode.Standard get_version (unichar uc);
    [CCode (array_length = false, array_null_terminated = true, cheader_filename = "unicode-info.h")]
    public static (unowned string)[] list_scripts ();
    [CCode (cheader_filename = "unicode-info.h")]
    public static bool unichar_isdefined (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static bool unichar_isgraph (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static int unichar_to_printable_utf8 (unichar uc, out unowned string outbuf);
    [CCode (cheader_filename = "unicode-info.h")]
    public static bool unichar_validate (unichar uc);
    [CCode (cheader_filename = "unicode-info.h")]
    public static unowned string version_to_string (Unicode.Standard version);
}
